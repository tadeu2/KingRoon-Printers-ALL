# Current Version v_202307052332
###
# START PRINT MACRO LIST
# Read more here: https://3dwork.gitbook.io/labs/klipper/mejoras/3dwork-klipper-bundle#configuracion-de-nuestro-laminador
#
#   START_PRINT	                                Start print procedure, use this in your Slicer.
#   _START_PRINT_AFTER_HEATING_BED
#   _USER_START_PRINT_BEFORE_HOMING
#   _USER_START_PRINT_AFTER_HEATING_BED    
#   _START_PRINT_BED_MESH
#   _USER_START_PRINT_BED_MESH    
#   _START_PRINT_PARK
#   _USER_START_PRINT_PARK
#   _START_PRINT_AFTER_HEATING_EXTRUDER
#   _USER_START_PRINT_AFTER_HEATING_EXTRUDER
#   PRIME_LINE                                  Prints a primeline, used internally, if configured, as part of the START_PRINT macro.
#   PRIME_BLOB                                  Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.
#   _START_PRINT_HEAT_CHAMBER                   Uses the extruder sensor to wait for chamber temp. Override the _START_PRINT_HEAT_CHAMBER macro to implement heated chamber handling.
#   _USER_START_PRINT_HEAT_CHAMBER              Uses the extruder sensor to wait for chamber temp. Override the _START_PRINT_HEAT_CHAMBER macro to implement heated chamber handling.
####

[gcode_macro START_PRINT]
description: Start print procedure, use this in your Slicer.
gcode:
  CLEAR_PAUSE
  {% if printer["gcode_macro GLOBAL_VARS"].force_absolute_position %}
    G90
  {% endif %}
  SAVE_GCODE_STATE NAME=start_print_state
  
  G21   # Metric values
  G90   # Absolute positioning
  M82   # Set extruder to absolute mode

  # Run the user created "START_PRINT_BEFORE_HOMING" macro
  _USER_START_PRINT_BEFORE_HOMING

  {% if printer["gcode_macro GLOBAL_VARS"].z_probe|lower == 'stowable' %}
    STOWABLE_PROBE_BEGIN_BATCH
  {% endif %}
  
  MAYBE_HOME  # Home if needed
  
  {% if params.CHAMBER_TEMP is defined %}
    _START_PRINT_HEAT_CHAMBER CHAMBER_TEMP={params.CHAMBER_TEMP} BED_TEMP={printer["gcode_macro GLOBAL_VARS"].start_print_heat_chamber_bed_temp}
    _USER_START_PRINT_HEAT_CHAMBER CHAMBER_TEMP={params.CHAMBER_TEMP} BED_TEMP={printer["gcode_macro GLOBAL_VARS"].start_print_heat_chamber_bed_temp}
  {% endif %}

  M117 {printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_heating_bed}
  RESPOND MSG="{printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_heating_bed}"

  # Wait for bed to heat up
  M190 S{params.BED_TEMP|default(printer.heater_bed.target, true)}

  # Run the user created "AFTER_HEATING_BED" macro
  _USER_START_PRINT_AFTER_HEATING_BED
  # Run the customizable "AFTER_HEATING_BED" macro.
  _START_PRINT_AFTER_HEATING_BED

  # Run the user created "START_PRINT_BED_MESH" macro
  _USER_START_PRINT_BED_MESH
  # Run the customizable "BED_MESH" macro
  _START_PRINT_BED_MESH PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX}

  {% if printer["gcode_macro GLOBAL_VARS"].z_probe|lower == 'stowable' %}
    STOWABLE_PROBE_END_BATCH
  {% endif %}

  # Start heating extruder
  M104 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true)}
  
  # Run the users "PARK" macro
  _USER_START_PRINT_PARK
  # Run the customizable "PARK" macro
  _START_PRINT_PARK
  
  M117 Heating Extruder...
  RESPOND MSG="Heating Extruder..."
  
  # Wait for extruder to heat up
  M109 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true)}

  # Run the user created "AFTER_HEATING_EXTRUDER" macro.
  _USER_START_PRINT_AFTER_HEATING_EXTRUDER
  # Run the customizable "AFTER_HEATING_EXTRUDER" macro.
  _START_PRINT_AFTER_HEATING_EXTRUDER PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX}
  
  M117 {printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_printing}
  RESPOND MSG="{printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_printing}"
  
  # Set extrusion mode based on user configuration
  {% if printer["gcode_macro GLOBAL_VARS"].relative_extrusion %}
    M83
  {% else %}
    M82
  {% endif %}
  G92 E0

#####
# START PRINT MACRO HOOKS
# You can copy these to printer.cfg and modify them to your liking, or just use them as is.
####

[gcode_macro _START_PRINT_AFTER_HEATING_BED]
gcode:
  #Pre-heat Extruder
  {% if printer["gcode_macro GLOBAL_VARS"].preheat_extruder %}
    {% set min_temp = printer["gcode_macro GLOBAL_VARS"].preheat_extruder_temp|float %}
    {% set max_temp = printer["gcode_macro GLOBAL_VARS"].preheat_extruder_temp|float + 5 %}
    
    M117 {printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_pre_heating_extruder}
    RESPOND MSG="{printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_pre_heating_extruder}"
    
    # Wait for extruder to reach a predefined preheat temp so an inductive probe (if present) is at a predictable temp. 
    # Also allows the bed heat to spread a little, and softens any plastic that might be stuck to the nozzle.
    M104 S{min_temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={min_temp} MAXIMUM={max_temp}
  {% endif %}
  
  #Z-tilt Leveling
  {% set Z_TILT = printer['configfile'].config["z_tilt"] is defined %}

  {% if Z_TILT %}
    { action_respond_info("z-tilt  : %d" % (Z_TILT)) }
    {% if printer["gcode_macro GLOBAL_VARS"].calibrate_z_tilt %}
        # Adjust bed tilt
        M117 {printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_ztilt}
        RESPOND MSG="{printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_ztilt}"
        Z_TILT_ADJUST
        # Home again as Z will have changed after tilt adjustment and bed heating.
        M117 {printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_ztilt_homingz}
        RESPOND MSG="{printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_ztilt_homingz}"          
        G28 Z
    {% else %}
        M117 {printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_ztilt_notenabled}
        RESPOND MSG="{printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_ztilt_notenabled}"
    {% endif %}
  {% else %}
    { action_respond_info("z-tilt  : %d" % (Z_TILT)) }
    M117 {printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_ztilt_notenabled}
    RESPOND MSG="{printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_ztilt_notenabled}"
  {% endif %}
  
[gcode_macro _USER_START_PRINT_BEFORE_HOMING]
gcode:

[gcode_macro _USER_START_PRINT_AFTER_HEATING_BED]
gcode:

[gcode_macro _START_PRINT_BED_MESH]
gcode:
  {% set default_profile = printer["gcode_macro GLOBAL_VARS"].bed_mesh_profile|default('default') %}
  {% if printer["gcode_macro GLOBAL_VARS"].calibrate_bed_mesh|lower == 'newmesh' %}
    M117 {printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_bedmesh_newmesh}
    RESPOND MSG="{printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_bedmesh_newmesh}"

    BED_MESH_CLEAR
    BED_MESH_CALIBRATE PROFILE={default_profile}
    BED_MESH_PROFILE LOAD={default_profile}
  {% elif printer["gcode_macro GLOBAL_VARS"].calibrate_bed_mesh|lower == 'storedmesh' %}
    M117 {printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_bedmesh_storedmesh}
    RESPOND MSG="{printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_bedmesh_storedmesh}"
    
    BED_MESH_CLEAR
    BED_MESH_PROFILE LOAD={printer["gcode_macro GLOBAL_VARS"].bed_mesh_profile}
  {% elif printer["gcode_macro GLOBAL_VARS"].calibrate_bed_mesh|lower == 'adaptative' %}
    M117 {printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_bedmesh_adantative}
    RESPOND MSG="{printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_bedmesh_adantative}"
    {action_respond_info("print_min: %s" % params.PRINT_MIN)}
    {action_respond_info("print_max: %s" % params.PRINT_MAX)}
    
    BED_MESH_CLEAR
    CALIBRATE_ADAPTIVE_MESH PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX} PROFILE={default_profile}
    BED_MESH_PROFILE LOAD={default_profile}
  {% elif printer["gcode_macro GLOBAL_VARS"].calibrate_bed_mesh|lower == 'nomesh' %}
    M117 {printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_bedmesh_nomesh}
    RESPOND MSG="{printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_bedmesh_nomesh}"
  {% endif %}
  
[gcode_macro _USER_START_PRINT_BED_MESH]
gcode:

[gcode_macro _START_PRINT_PARK]
gcode:
  M117 {printer["gcode_macro GLOBAL_VARS"].start_print_park_in}
  RESPOND MSG="{printer["gcode_macro GLOBAL_VARS"].start_print_park_in}"
  {% if printer["gcode_macro GLOBAL_VARS"].start_print_park_in|lower == 'delta' %}
    M117 Delta printer PARK
    RESPOND MSG="Delta printer PARK"
    {% set z = printer.toolhead.axis_maximum.z - 5 %}
    {% set z = printer.toolhead.axis_maximum.z - 20 %}
    { action_respond_info("park_z       : %f" % (z)) }
  {% else %}
    M117 Regular printer PARK
    RESPOND MSG="Regular printer PARK"
    {% set z = printer["gcode_macro GLOBAL_VARS"].start_print_park_z_height|float %}
    { action_respond_info("park_z       : %f" % (z)) }
    {% endif %}
  {% set zSpeed = printer["gcode_macro GLOBAL_VARS"].macro_z_speed|float * 60 %}
  _PARK LOCATION={printer["gcode_macro GLOBAL_VARS"].start_print_park_in} X={printer["gcode_macro GLOBAL_VARS"].start_print_park_x}
  G0 Z{z} F{zSpeed}

  
[gcode_macro _USER_START_PRINT_PARK]
gcode:

[gcode_macro _START_PRINT_AFTER_HEATING_EXTRUDER]
gcode:
  {% if printer["gcode_macro GLOBAL_VARS"].nozzle_priming|lower == 'primeline' %}
    PRIME_LINE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX}
  {% endif %}
  {% if printer["gcode_macro GLOBAL_VARS"].nozzle_priming|lower == 'primelineadaptative' %}
    PRIME_LINE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX}
  {% endif %}
  {% if printer["gcode_macro GLOBAL_VARS"].nozzle_priming|lower == 'primeblob' %}
    PRIME_BLOB
  {% endif %}
  {% if printer["gcode_macro GLOBAL_VARS"].skew_profile is defined %}
    SKEW_PROFILE LOAD={printer["gcode_macro GLOBAL_VARS"].skew_profile}
  {% endif %}
  
[gcode_macro _USER_START_PRINT_AFTER_HEATING_EXTRUDER]
gcode:
  
[gcode_macro PRIME_LINE]
description: Prints a primeline, used internally, if configured, as part of the START_PRINT macro.
gcode:
  SAVE_GCODE_STATE NAME=prime_line_state
  # Set Primeline Type notifications
  {% if printer["gcode_macro GLOBAL_VARS"].nozzle_priming|lower == 'primelineadaptative' %}
    M117 {printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_primelineadaptative}
    RESPOND MSG="{printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_primelineadaptative}"
  {% else %}
    M117 {printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_primeline}
    RESPOND MSG="{printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_primeline}"
  {% endif %}
  
  {% set speed = printer["gcode_macro GLOBAL_VARS"].macro_travel_speed|float * 60 %}
  {% set z_speed = printer["gcode_macro GLOBAL_VARS"].macro_z_speed|float * 60 %}
  
  {% if printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_x|lower == 'min' %}
    # Checking if adaptative primeline
    {% if printer["gcode_macro GLOBAL_VARS"].nozzle_priming|lower == 'primelineadaptative' %}
      # Checking for params.PRINT_MIN
      {% if params.PRINT_MIN %}
        {% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}
        {% if (print_min_x - printer["gcode_macro GLOBAL_VARS"].nozzle_priming_objectdistance) < 5 %}
          # PRINT_MIN_X - Object Distance is less 5mm setting to default
          {% set x_start = 5 %} 
        {% else %}
          # Setting x_start to PRINT_MIN_X - Object Distance
          {% set x_start  = (print_min_x - printer["gcode_macro GLOBAL_VARS"].nozzle_priming_objectdistance)|float %}
        {% endif %}
      {% else %}
        # No params.PRINT_MIN setting to default
        {% set x_start = 5 %}
      {% endif %}
    {% else %}
      # Setting to default
      {% set x_start = 5 %} 
    {% endif %}
    
  {% elif printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_x|lower == 'max' %}
     # Checking if adaptative primeline
    {% if printer["gcode_macro GLOBAL_VARS"].nozzle_priming|lower == 'primelineadaptative' %}
      # Checking for params.PRINT_MAX
      {% if params.PRINT_MAX %}
        {% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}
        {% if (print_max_x + printer["gcode_macro GLOBAL_VARS"].nozzle_priming_objectdistance) > printer.toolhead.axis_maximum.x %}
          # PRINT_MAX_X + Object Distance is more than x axis max setting to default
          {% set x_start = printer.toolhead.axis_maximum.x - 5 %} 
        {% else %}
          # Setting x_start to PRINT_MAX_X + Object Distance
          {% set x_start  = (print_max_x + printer["gcode_macro GLOBAL_VARS"].nozzle_priming_objectdistance)|float %}
        {% endif %}
      {% else %}
        # No params.PRINT_MAX setting to default
        {% set x_start = printer.toolhead.axis_maximum.x - 5 %} 
      {% endif %}
    {% else %}
      # Setting to default
      {% set x_start = printer.toolhead.axis_maximum.x - 5 %} 
    {% endif %} 
    
  {% else %}
    {% set x_start = printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_x|float %}
  {% endif %}
  
  {% if printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_y|lower == 'min' %}
    # Checking if adaptative primeline
    {% if printer["gcode_macro GLOBAL_VARS"].nozzle_priming|lower == 'primelineadaptative' %}
      # Checking for params.PRINT_MIN
      {% if params.PRINT_MIN %}
        {% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}
        {% if (print_min_y - printer["gcode_macro GLOBAL_VARS"].nozzle_priming_objectdistance) < 5 %}
          # PRINT_MIN_Y - Object Distance is less 5mm setting to default
          {% set y_start = 5 %} 
        {% else %}
          # Setting y_start to PRINT_MIN_Y - Object Distance
          {% set y_start  = (print_min_y - printer["gcode_macro GLOBAL_VARS"].nozzle_priming_objectdistance)|float %}
        {% endif %}
      {% else %}
        # No params.PRINT_MIN setting to default
        {% set y_start = 5 %} 
      {% endif %}
    {% else %}
      # Setting to default
      {% set y_start = 5 %} 
    {% endif %}
    {% set y_factor = 1 %}

  {% elif printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_y|lower == 'max' %}
    # Checking if adaptative primeline
    {% if printer["gcode_macro GLOBAL_VARS"].nozzle_priming|lower == 'primelineadaptative' %}
      # Checking for params.PRINT_MAX
      {% if params.PRINT_MAX %}
        {% set print_max_y = params.PRINT_MAX.split(",")[01]|float %}
        {% if (print_max_y + printer["gcode_macro GLOBAL_VARS"].nozzle_priming_objectdistance) > printer.toolhead.axis_maximum.y %}
          # PRINT_MAX_Y + Object Distance is more than y axis max setting to default
          {% set y_start = printer.toolhead.axis_maximum.y - 5 %} 
        {% else %}
          # Setting y_start to PRINT_MAX_Y + Object Distance
          {% set y_start  = (print_max_y + printer["gcode_macro GLOBAL_VARS"].nozzle_priming_objectdistance)|float %}
        {% endif %}
      {% else %}
        # No params.PRINT_MAX setting to default
        {% set y_start = printer.toolhead.axis_maximum.y - 5 %} 
      {% endif %}
    {% else %}
      # Setting to default
      {% set y_start = printer.toolhead.axis_maximum.y - 5 %} 
    {% endif %} 
    {% set y_factor = -1 %}

  {% else %}
    {% set y_start = printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_y|float %}
    {% if printer["gcode_macro GLOBAL_VARS"].nozzle_prime_start_y|float < printer.toolhead.axis_maximum.y / 2 %}
      {% set y_factor = 1 %}
    {% else %}
      {% set y_factor = -1 %}
    {% endif %}
  {% endif %}
  
  {% if printer["gcode_macro GLOBAL_VARS"].nozzle_prime_direction|lower == 'forwards' %}
    {% set y_factor = 1 %}
  {% elif printer["gcode_macro GLOBAL_VARS"].nozzle_prime_direction|lower == 'backwards' %}
    {% set y_factor = -1 %}
  {% endif %}
  {% set z = printer["gcode_macro GLOBAL_VARS"].start_print_park_z_height|float %}
  # Debug coordinates
  { action_respond_info("Prime Line x_origin          : %f" % (x_start)) }
  { action_respond_info("Prime Line x_origin          : %f" % (y_start)) }
  { action_respond_info("Prime Line y_factor          : %f" % (y_factor)) }
  
  # Absolute positioning
  G90 
  # Absolute extrusion
  M82

  # Lift to start print Z height
  G0 Z{z} F{z_speed}
  # move to blob position along the edge of the bed
  G1 X{x_start} F{speed}
  G1 Y{y_start} F{speed}
  # Get ready to prime
  G1 Z0.3 F{z_speed}
  # Reset extrusion distance
  G92 E0
  # Prime nozzle 
  G1 Y{y_start + (70 * y_factor)} E16 F1200
  # Wipe
  G1 Y{y_start + (30 * y_factor)} F{speed}
  RESTORE_GCODE_STATE NAME=prime_line_state

[gcode_macro PRIME_BLOB]
description: Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.
gcode:
  SAVE_GCODE_STATE NAME=prime_blob_state
  
  M117 {printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_primeblob}
  RESPOND MSG="{printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_primeblob}"
  
  {% set gv = printer["gcode_macro GLOBAL_VARS"] %}
  {% set speed = gv.macro_travel_speed|float * 60 %}
  {% set z_speed = gv.macro_z_speed|float * 60 %}

  #
  {% if gv.nozzle_prime_start_x|lower == 'min' %}
    {% set x_start = 5 %}
  {% elif gv.nozzle_prime_start_x|lower == 'max' %}
    {% set x_start = printer.toolhead.axis_maximum.x - 5 %}
  {% else %}
    {% set x_start = gv.nozzle_prime_start_x|float %}
  {% endif %}

  {% if gv.nozzle_prime_start_y|lower == 'min' %}
    {% set y_start = 5 %}
    {% set y_factor = 1 %}
  {% elif gv.nozzle_prime_start_y|lower == 'max' %}
    {% set y_start = printer.toolhead.axis_maximum.y - 5 %}
    {% set y_factor = -1 %}
  {% else %}
    {% set y_start = gv.nozzle_prime_start_y|float %}
    {% set y_factor = 1 if y_start < printer.toolhead.axis_maximum.y / 2 else -1 %}
  {% endif %}

  # Possible prime_direction values: "auto" "forwards" or "backwards"
  {% if gv.nozzle_prime_direction|lower == 'forwards' %}
    {% set y_factor = 1 %}
  {% elif gv.nozzle_prime_direction|lower == 'backwards' %}
    {% set y_factor = -1 %}
  {% endif %}
  
  {% set z = gv.start_print_park_z_height|float %}

  # Absolute positioning
  G90 
  # Relative extrusion
  M83
  # Lift to start print Z height
  G0 Z{z} F{z_speed}
  # move close to blob position along the edge of the bed
  G1 X{x_start} F{speed}
  G1 Y{y_start + (15 * y_factor)} F{speed}
  # Lower to blob extrusion height
  {% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}
  {action_respond_info("nozzle_dia : %f" % (nozzle_dia))}
  G1 Z{nozzle_dia} F{z_speed}
  # Move to final position horizontally
  G1 Y{y_start} F{speed}
  # Extrude a blob
  G1 F60 E20
  # 40% fan
  M106 S102 
  # Move the extruder up by 5mm while extruding, breaks away from blob
  G1 Z5 F100 E5  
  # Move to wipe position, but keep extruding so the wipe is attached to blob
  G1 F200 Y{y_start + (25 * y_factor)} E1 
  # Go down diagonally while extruding
  # Broken down in z moves under 2mm as a workaround for a tuning tower test.
  # The tuning tower command thinks a new print has been started when z moves over 2mm and aborts.
  G1 F200 Y{y_start + (30 * y_factor)} Z3.8 E0.5
  G1 F200 Y{y_start + (35 * y_factor)} Z2.6 E0.5
  G1 F200 Y{y_start + (40 * y_factor)} Z1.4 E0.5
  G1 F200 Y{y_start + (45 * y_factor)} Z0.2 E0.5
  # 0% fan
  M106 S0
  # small wipe line
  G1 F200 Y{y_start + (50 * y_factor)} Z0.2 E0.6 
  # Break away wipe
  G1 F{speed} Y{y_start + (100 * y_factor)}
  RESTORE_GCODE_STATE NAME=prime_blob_state

[gcode_macro _START_PRINT_HEAT_CHAMBER]
description: Uses the extruder sensor to wait for chamber temp. Override the _START_PRINT_HEAT_CHAMBER macro to implement heated chamber handling.
gcode:
  {% if params.CHAMBER_TEMP is defined and params.BED_TEMP is defined and params.CHAMBER_TEMP|int > 0 %}
    {% set z = printer["gcode_macro GLOBAL_VARS"].start_print_park_z_height|float %}
    {% set zSpeed = printer["gcode_macro GLOBAL_VARS"].macro_z_speed|float * 60 %}

    G0 Z{z} F{zSpeed}
    M84
    
    M117 {printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_heating_chamber}
    RESPOND MSG="{printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_heating_chamber}"
    
    M140 S{params.BED_TEMP}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.CHAMBER_TEMP}
    MAYBE_HOME
  {% endif %}
  
[gcode_macro _USER_START_PRINT_HEAT_CHAMBER]
description: Uses the extruder sensor to wait for chamber temp. Override the _START_PRINT_HEAT_CHAMBER macro to implement heated chamber handling.
gcode:
