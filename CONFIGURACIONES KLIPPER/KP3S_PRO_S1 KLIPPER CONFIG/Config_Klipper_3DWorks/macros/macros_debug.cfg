# Current Version v_202305221109

### DEBUG MACRO LIST
#
#   SEARCH_VARS	S="variable"  Look for a variable inside the "printer" object. - Busca una variable dentro del objeto "printer".
#   SET_VARIABLE_MACRO        Sets the value of a variable defined in the macro. - Establece el valor de una variable definida en la macro.
#   ECHO_VARS        	        Echo MACROS variables to the console.\n Use ECHO_VARS MACRO=[macro name]
#   RANDOM_NUMBERS            Gets a random number.- Obtiene un nÃºmero aleatorio.
#
###


[gcode_macro SEARCH_VARS]
description: Look for a variable inside the "printer" object.\n Usage: SEARCH_VARS	S="variable" 
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% set ns.path = ['printer', "['%s']" % (item), ''] if ' ' in item else ['printer.', item, ''] %}
        {% if search in ns.path|lower %}
            {action_respond_info(ns.path|join)}
        {% endif %}
        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}
                {% set null = ns.path.append("['%s']" % (childkey)) if ' ' in childkey else ns.path.append(".%s" % (childkey)) %}
                {% if child is mapping  %}
                    {loop(child.items())}
                {% else %}
                    {% if search in ns.path|lower %}
                        {action_respond_info("%s : %s" % (ns.path|join, child))}
                    {% endif %}
                {% endif %}
            {% endfor %}
        {% endif %}
    {% endfor %}

[gcode_macro SET_VARIABLE_MACRO]
description: Sets the value of a variable defined in the macro./n Usage: SET_VARIABLE_MACRO MACRO="macro_name" VARIABLE="variable_macro" VALUE=["text" or value]
gcode:  
  {% if params.MACRO is defined and params.VARIABLE is defined and params.VALUE is defined %}
    {% set variable = (params.VARIABLE).strip().lower() %}
    {% set macro = (params.MACRO).strip().upper() %}

    {% for var, value in printer["gcode_macro " ~ macro].items() %}
      {% if var|lower == variable %}

        {% set nostring = (params.VALUE).strip() %}
        {% set is_boolean = nostring|lower in ["true","false"] %} 
        {% set nostring = nostring|capitalize if is_boolean else nostring %} 

        {% if (nostring is number and value is number) or is_boolean %}
          SET_GCODE_VARIABLE MACRO={macro} VARIABLE={var} VALUE={nostring}
        {% else %}
          SET_GCODE_VARIABLE MACRO={macro} VARIABLE={var} VALUE='"{params.VALUE}"'
        {% endif %}

      {% endif %}
    {% endfor %}
  {% endif %}

[gcode_macro ECHO_VARS]
description: Echo MACROS variables to the console.\n Use ECHO_VARS MACRO=[macro name]/n Usage: ECHO_VARS MACRO="macro_name"
gcode:

  {% if params.MACRO is defined %}
    {% set type_variable = "" %}
    {% for var, value in printer["gcode_macro " ~ params.MACRO|upper].items() %}
      {% if value is boolean %}
        {% set type_variable = "BOOLEAN" %}
      {% elif value is number %}
        {% set type_variable = "NUMERIC" %}
      {% elif value is string %}
        {% set type_variable = "STRING" %}
      {% endif %}
      {action_respond_info(value ~ "    ->     " ~ var ~ ": " ~ value)}
    {% endfor %}
  {% else %}
      {action_respond_info("Specify the name of a macro in the MACRO=[macro name] parameter.")}
  {% endif %}

[gcode_macro RANDOM_NUMBERS]
description: Gets a random number.
gcode:
  {% set random_float = (range(0, 235) | random) / 10 %}
  {action_respond_info("random_float          : %f" % (random_float))}
