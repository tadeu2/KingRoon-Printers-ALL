# Current Version v_202305221109
# Based on RatOS with some adjustments 

### CALIBRATE_ADAPTIVE_MESH - Helps to calibrate bed mesh adapted to printer objec size
[gcode_macro CALIBRATE_ADAPTIVE_MESH]
gcode:
	# get default mesh profile
	{% set default_profile = params.PROFILE %}

	# coordinates from the slicer start gcode
	{% set x0 = params.PRINT_MIN.split(",")[0]|default(-1)|float %}
	{% set y0 = params.PRINT_MIN.split(",")[1]|default(-1)|float %}
	{% set x1 = params.PRINT_MAX.split(",")[0]|default(-1)|float %}
	{% set y1 = params.PRINT_MAX.split(",")[1]|default(-1)|float %}
	RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: Recieved coordinates X0={x0} Y0={y0} X1={x1} Y1={y1}"

	{% if x0 >= x1 or y0 >= y1 %}
		# coordinates are invalid, fall back to full bed mesh
		M117 {printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_bedmesh_adantative_invalidcoordinates}
    	RESPOND MSG="{printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_bedmesh_adantative_invalidcoordinates}"

		BED_MESH_CALIBRATE PROFILE={default_profile} 
	{% else %}
		# get bed mesh config object
		{% set mesh_config = printer.configfile.config.bed_mesh %}

		# get configured bed mesh area
		{% set min_x = mesh_config.mesh_min.split(",")[0]|float %}
		{% set min_y = mesh_config.mesh_min.split(",")[1]|float %}
		{% set max_x = mesh_config.mesh_max.split(",")[0]|float %}
		{% set max_y = mesh_config.mesh_max.split(",")[1]|float %}

		# make sure mesh coordinates lie within the configured mesh area
		{% set mesh_x0 = [[x0, max_x]|min, min_x]|max %}
		{% set mesh_y0 = [[y0, max_y]|min, min_y]|max %}
		{% set mesh_x1 = [[x1, max_x]|min, min_x]|max %}
		{% set mesh_y1 = [[y1, max_y]|min, min_y]|max %}

		{% if mesh_x0 == min_x and mesh_y0 == min_y and mesh_x1 == max_x and mesh_y1 == max_y %}
			# coordinates are invalid, fall back to full bed mesh
			M117 {printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_bedmesh_adantative_invalidcoordinates}
    		RESPOND MSG="{printer["gcode_macro LANGUAGE_GLOBAL_VARS"].msg_bedmesh_adantative_invalidcoordinates}"

			BED_MESH_CALIBRATE PROFILE={default_profile}
		{% else %}
			# get configured probe count
			{% set probe_count_x = mesh_config.probe_count.split(",")[0]|int %}
			{% if mesh_config.probe_count.split(",")|length == 2 %}
					{% set probe_count_y = mesh_config.probe_count.split(",")[1]|int %}
			{% else %}
					{% set probe_count_y = mesh_config.probe_count.split(",")[0]|int %}
			{% endif %}

			# calculate mesh point resolution
			{% set probe_x_step = (max_x - min_x) / probe_count_x %}
			{% set probe_y_step = (max_y - min_y) / probe_count_y %}

			# calculate xy probe count
			{% set mesh_count_x = ([(mesh_x1 - mesh_x0) / probe_x_step, 3]|max)|int %}
			{% set mesh_count_y = ([(mesh_y1 - mesh_y0) / probe_y_step, 3]|max)|int %}
			{% set min_mesh_count = [mesh_count_x, mesh_count_y]|min %}
			{% set max_mesh_count = [mesh_count_x, mesh_count_y]|max %}

			# check algorithms
			{% set algorithm = mesh_config.algorithm %}
			{% if algorithm|lower == 'lagrange' and max_mesh_count > 6 %}
				RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: cannot exceed a probe_count of 6 when using lagrange interpolation. Falling back to bicubic interpolation."
				{% set algorithm = 'bicubic' %}
			{% endif %}
			{% if algorithm|lower == 'bicubic' and min_mesh_count < 4 %}
				{% if max_mesh_count > 6 %}
					RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: invalid probe_count option when using bicubic interpolation. Combination of 3 points on one axis with more than 6 on another is not permitted. Forcing minimum mesh count to be 4."
					{% set min_mesh_count = 4 %}
				{% else %}
					RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: bicubic interpolation with a probe_count of less than 4 points detected. Forcing lagrange interpolation."
					{% set algorithm = 'lagrange' %}
				{% endif %}
			{% endif %}

			# mesh
			RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: mesh coordinates X0={mesh_x0} Y0={mesh_y0} X1={mesh_x1} Y1={mesh_y1}"
			BED_MESH_CALIBRATE PROFILE={default_profile} algorithm={algorithm} mesh_min={mesh_x0},{mesh_y0} mesh_max={mesh_x1},{mesh_y1} probe_count={mesh_count_x},{mesh_count_y} relative_reference_index=-1

		{% endif %}
	{% endif %}

### CALCULATE_BED_MESH - Helps to calculate bed mesh boundaries automatically
## More info https://3dwork.gitbook.io/3dwork.io/klipper/empezamos/malla-nivelacion-de-cama-klipper

[gcode_macro CALCULATE_BED_MESH]
description: Calculate bed_mesh boundaries automatically based on your bltouch/probe config
gcode:
  {% set BED_MESH_MARGIN = params.BED_MESH_MARGIN|default(10)|float %}
  # Get Printer built volume dimensions
  {% set X_MAX = printer.toolhead.axis_maximum.x|default(230)|float %}
  {% set Y_MAX = printer.toolhead.axis_maximum.y|default(230)|float %}
  # Get Nothing/BLTouch/Probe X and Y offsets
  {% set X_OFFSET = 0.0 |float %}
  {% set Y_OFFSET = 0.0 |float %}
  #Get BLTouch/Probe X and Y offsets
  {% if printer.configfile.config["bltouch"] is defined %}
    {% set X_OFFSET = (printer.configfile.settings.bltouch.x_offset if printer.configfile.settings.bltouch.x_offset is defined else X_OFFSET)|float %}
    {% set Y_OFFSET = (printer.configfile.settings.bltouch.y_offset if printer.configfile.settings.bltouch.y_offset is defined else Y_OFFSET)|float %}
  {% endif %}
  {% if printer.configfile.config["probe"] is defined %}
    {% set X_OFFSET = (printer.configfile.config.probe.x_offset if printer.configfile.config.probe.x_offset is defined else X_OFFSET)|float %}
    {% set Y_OFFSET = (printer.configfile.config.probe.y_offset if printer.configfile.config.probe.y_offset is defined else Y_OFFSET)|float %}
  {% endif %}

  # bed_mesh boundaries calculations
  # bed_mesh_min and bed_mesh_max
  {% set BED_MESH_MIN_X = (BED_MESH_MARGIN if X_OFFSET <= 0.0 else X_OFFSET + BED_MESH_MARGIN)|float %}
  {% set BED_MESH_MIN_Y = (BED_MESH_MARGIN if Y_OFFSET <= 0.0 else Y_OFFSET + BED_MESH_MARGIN)|float %}
  {% set BED_MESH_MAX_X = (X_MAX - (X_OFFSET)|abs - BED_MESH_MARGIN if X_OFFSET <= 0.0 else X_MAX - BED_MESH_MARGIN)|float %}
  {% set BED_MESH_MAX_Y = (Y_MAX - (Y_OFFSET)|abs - BED_MESH_MARGIN if Y_OFFSET <= 0.0 else Y_MAX - BED_MESH_MARGIN)|float %}

  # Print values
  {action_respond_info("BED_MESH_MARGIN : %f" % (BED_MESH_MARGIN))}
  {action_respond_info("X_MAX           : %f" % (X_MAX))}
  {action_respond_info("Y_MAX           : %f" % (Y_MAX))}
  {action_respond_info("X_OFFSET        : %f" % (X_OFFSET))}
  {action_respond_info("Y_OFFSET        : %f" % (Y_OFFSET))}
  {action_respond_info("BED_MESH_MIN_X  : %f" % (BED_MESH_MIN_X))}
  {action_respond_info("BED_MESH_MIN_Y  : %f" % (BED_MESH_MIN_Y))}
  {action_respond_info("BED_MESH_MAX_X  : %f" % (BED_MESH_MAX_X))}
  {action_respond_info("BED_MESH_MAX_Y  : %f" % (BED_MESH_MAX_Y))}
  {action_respond_info("--- VALUES TO ADD OR UPDATE TO OUR BED_MESH VALUES ---")}
  {action_respond_info("--- VALORES PARA AGREGAR O ACTUALIZAR EN NUESTRA SECCIÃ“N BED_MESH ---")}
  {action_respond_info("mesh_max: %s,%s" % (BED_MESH_MAX_X,BED_MESH_MAX_Y))}
  {action_respond_info("mesh_min: %s,%s" % (BED_MESH_MIN_X,BED_MESH_MIN_Y))}